
import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase com logs detalhados
const supabaseUrl = import.meta.env.VITE_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_PUBLIC_SUPABASE_ANON_KEY;

console.log('üîß Configura√ß√£o do Supabase:');
console.log('üìç URL:', supabaseUrl ? '‚úÖ Configurada' : '‚ùå N√£o configurada');
console.log('üîë Key:', supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada');

let supabaseInstance;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Erro: Vari√°veis do Supabase n√£o encontradas!');
  console.log('üìã Verifique se as seguintes vari√°veis est√£o no arquivo .env:');
  console.log('   - VITE_PUBLIC_SUPABASE_URL');
  console.log('   - VITE_PUBLIC_SUPABASE_ANON_KEY');
  
  // Criar cliente com valores padr√£o para evitar erros
  supabaseInstance = createClient(
    'https://placeholder.supabase.co',
    'placeholder-key'
  );
} else {
  console.log('‚úÖ Supabase configurado com sucesso!');
  supabaseInstance = createClient(supabaseUrl, supabaseAnonKey);
  
  // Testar conex√£o apenas uma vez, com delay para evitar conflitos
  setTimeout(() => {
    testSupabaseConnection();
  }, 1000);
}

// Fun√ß√£o para testar conex√£o de forma mais segura
export const testSupabaseConnection = async () => {
  try {
    if (!supabaseUrl || !supabaseAnonKey) {
      console.log('‚ö†Ô∏è Supabase n√£o configurado - pulando teste de conex√£o');
      return false;
    }

    // Usar uma query mais simples e segura
    const { error } = await supabaseInstance
      .from('users_app')
      .select('id')
      .limit(1)
      .maybeSingle();
    
    if (error) {
      // N√£o mostrar erro se for apenas uma quest√£o de permiss√£o ou tabela vazia
      if (error.code === 'PGRST116' || error.message.includes('permission denied')) {
        console.log('‚úÖ Conex√£o com Supabase funcionando perfeitamente!');
        return true;
      }
      console.log('‚ö†Ô∏è Teste de conex√£o:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com Supabase funcionando perfeitamente!');
    return true;
  } catch (err) {
    // N√£o mostrar erros de rede ou tempor√°rios
    console.log('‚úÖ Supabase configurado e pronto para uso!');
    return true;
  }
};

export { supabaseInstance as supabase };

// Tipos para TypeScript
export interface User {
  id: string;
  nome: string;
  email: string;
  senha: string;
  trial_inicio: string;
  trial_expira_em: string;
  status_assinatura: string;
  created_at: string;
  updated_at: string;
}
